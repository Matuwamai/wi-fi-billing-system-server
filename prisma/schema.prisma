// schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  phone          String          @unique
  macAddress     String?         @unique
  password       String?
  status         UserStatus      @default(ACTIVE)
  subscriptions  Subscription[]
  routerSessions RouterSession[]
  payments       Payment[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Plan {
  id            Int             @id @default(autoincrement())
  name          String
  description   String?
  durationType  DurationType // hour, day, week, month
  durationValue Int // e.g. 1, 6, 30
  price         Float
  paments       Payment[]
  subscriptions Subscription[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  RouterSession RouterSession[]
}

model Subscription {
  id            Int                @id @default(autoincrement())
  userId        Int
  planId        Int
  startTime     DateTime           @default(now())
  endTime       DateTime
  status        SubscriptionStatus @default(ACTIVE)
  paymentId     Int?
  user          User               @relation(fields: [userId], references: [id])
  plan          Plan               @relation(fields: [planId], references: [id])
  payment       Payment?           @relation(fields: [paymentId], references: [id])
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  RouterSession RouterSession[]
}

model Payment {
  id                Int            @id @default(autoincrement())
  userId            Int
  amount            Float
  method            PaymentMethod  @default(MPESA)
  mpesaCode         String?        @unique(map: "Payment_mpesaCode_key") @db.VarChar(50)
  status            PaymentStatus  @default(PENDING)
  transactionDate   DateTime       @default(now())
  callbackData      Json?
  checkoutRequestId String?        @unique
  merchantRequestId String?        @unique
  planId            Int?
  plan              Plan?          @relation(fields: [planId], references: [id])
  user              User           @relation(fields: [userId], references: [id])
  subscription      Subscription[]
}

model RouterSession {
  id             Int          @id @default(autoincrement())
  userId         Int
  planId         Int
  subscriptionId Int
  status         String       @default("ACTIVE")
  startedAt      DateTime     @default(now())
  endedAt        DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id])
  plan           Plan         @relation(fields: [planId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum DurationType {
  HOUR
  DAY
  WEEK
  MONTH
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentMethod {
  MPESA
  CASH
  CARD
}
